// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapi.Data;

#nullable disable

namespace webapi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("webapi.Models.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Blogs");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("BlogsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            Id = "47B12A9A-03A0-4FF5-91A8-6EF0093BD6AD",
                            ConcurrencyStamp = "99c39869-2ac2-44c1-b486-ba1b0a767988",
                            Name = "Blog 1"
                        },
                        new
                        {
                            Id = "F1AD8BA9-F590-4C7D-90E0-85C0AA138093",
                            ConcurrencyStamp = "6501ac65-9359-42a4-82b8-13961a8a5c94",
                            Name = "Blog 2"
                        },
                        new
                        {
                            Id = "8C0CDEF3-B8A8-4C79-AF0A-6663ADDA1FA2",
                            ConcurrencyStamp = "1577104d-dd43-4959-8101-d1dbf73bfa1c",
                            Name = "Blog 3"
                        });
                });

            modelBuilder.Entity("webapi.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("CommentsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            Id = "F1107A63-6F7D-4C00-898E-D550BAF73A26",
                            ConcurrencyStamp = "31a7f348-130e-4d48-bea8-ed6dabbc0d62",
                            Content = "Comment 1",
                            PostId = "D3BB153E-8856-4A3B-9E03-0D5B9B295D96"
                        },
                        new
                        {
                            Id = "B1433D5D-70B7-48F9-808E-81CC42BEB05C",
                            ConcurrencyStamp = "5025649d-9507-45ab-8bea-909a2ba6af61",
                            Content = "Comment 2",
                            PostId = "D3BB153E-8856-4A3B-9E03-0D5B9B295D96"
                        },
                        new
                        {
                            Id = "6CC5A0E6-3E09-4454-ABF5-534EEB5E27C8",
                            ConcurrencyStamp = "f729313e-b33f-4e8d-9f66-7a2e1c2b2586",
                            Content = "Comment 3",
                            PostId = "1217FD74-183E-47D7-8C00-69CCC2F384EF"
                        });
                });

            modelBuilder.Entity("webapi.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("PostsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            Id = "D3BB153E-8856-4A3B-9E03-0D5B9B295D96",
                            BlogId = "47B12A9A-03A0-4FF5-91A8-6EF0093BD6AD",
                            ConcurrencyStamp = "ffb4832d-fa9f-4d92-89b9-948e329f35af",
                            Content = "Post 1 content",
                            Title = "Post 1"
                        },
                        new
                        {
                            Id = "1217FD74-183E-47D7-8C00-69CCC2F384EF",
                            BlogId = "47B12A9A-03A0-4FF5-91A8-6EF0093BD6AD",
                            ConcurrencyStamp = "692ae3b6-1629-47a5-823b-d7de26f298bd",
                            Content = "Post 2 content",
                            Title = "Post 2"
                        },
                        new
                        {
                            Id = "C51D4C18-D178-432A-A8FC-AA6893DAE5C7",
                            BlogId = "47B12A9A-03A0-4FF5-91A8-6EF0093BD6AD",
                            ConcurrencyStamp = "38d81118-076c-4252-84dd-fc89ff2a707b",
                            Content = "Post 3 content",
                            Title = "Post 3"
                        },
                        new
                        {
                            Id = "1FC6D571-4A93-4CE8-AF2A-03290127BF82",
                            BlogId = "F1AD8BA9-F590-4C7D-90E0-85C0AA138093",
                            ConcurrencyStamp = "4cdc6589-adc2-4b8f-9c1a-34b6c16f911a",
                            Content = "Post 4 content",
                            Title = "Post 4"
                        });
                });

            modelBuilder.Entity("webapi.Models.Comment", b =>
                {
                    b.HasOne("webapi.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("webapi.Models.Post", b =>
                {
                    b.HasOne("webapi.Models.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("webapi.Models.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("webapi.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
